# fivepaisa_ai_dashboard/auth_5paisa.py
"""
Authentication Module for 5paisa API

Handles the login process, token generation, and session management
for interacting with the 5paisa trading APIs using the `py5paisa` SDK.

Key Responsibilities:
- Load API credentials from environment variables (via a `.env` file).
- Provide a UI for TOTP and PIN entry.
- Manage the `RequestToken` and `AccessToken`.
- Store client and token information in Streamlit's session state.
- Offer methods to get the authenticated 5paisa client instance.
"""

import streamlit as st
from py5paisa import FivePaisaClient
import logging
import os
from dotenv import load_dotenv

# Load environment variables once at import time. Safe even if `.env` is absent.
load_dotenv()

# Import configurations
from config import APP_TITLE  # For consistent logging/messaging

# --------------------------------------------------------------------------- #
#                                 Logging                                     #
# --------------------------------------------------------------------------- #
logger = logging.getLogger(f"{APP_TITLE}.Auth")
if not logger.handlers:  # Avoid adding multiple handlers if the module reloads
    handler = logging.StreamHandler()
    formatter = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)

# --------------------------------------------------------------------------- #
#                               Sessionâ€‘state keys                            #
# --------------------------------------------------------------------------- #
SESSION_STATE_KEY_CLIENT = "5paisa_client_instance"
SESSION_STATE_KEY_CLIENT_CODE = "5paisa_client_code"
SESSION_STATE_KEY_ACCESS_TOKEN = "5paisa_access_token"
SESSION_STATE_KEY_REQUEST_TOKEN = "5paisa_request_token"  # For OAuth, rarely used
SESSION_STATE_KEY_LOGGED_IN_STATUS = "5paisa_logged_in"
SESSION_STATE_KEY_USER_KEY = "5paisa_user_key"  # May be required for refresh

# --------------------------------------------------------------------------- #
#                                Helper functions                             #
# --------------------------------------------------------------------------- #

def _load_credentials_from_env() -> dict | None:
    """Load 5paisa API credentials from environment variables (.env).

    Returns
    -------
    dict | None
        Dictionary compatible with `py5paisa.FivePaisaClient(cred=...)` or
        *None* if any of the required variables are missing (an error is shown
        to the user in that case).
    """
    # Ensure env vars are loaded even if this function is called independently
    load_dotenv(override=False)

    required_envs = [
        "APP_NAME",
        "APP_SOURCE",
        "USER_ID",
        "PASSWORD",
        "USER_KEY",
        "ENCRYPTION_KEY",
    ]
    missing = [key for key in required_envs if not os.getenv(key)]

    if missing:
        logger.error("Missing required API credentials in .env: %s", ", ".join(missing))
        st.error(
            f"Critical API credentials missing in `.env`: {', '.join(missing)}. "
            "Please configure them to proceed."
        )
        return None

    cred = {key: os.getenv(key) for key in required_envs}

    # Cache USER_KEY in session_state for potential future use (token refresh).
    if SESSION_STATE_KEY_USER_KEY not in st.session_state:
        st.session_state[SESSION_STATE_KEY_USER_KEY] = cred["USER_KEY"]

    logger.info("Successfully loaded API credentials from .env.")
    return cred


def _get_totp_login_details_from_env() -> tuple[str | None, str | None]:
    """Return `(CLIENT_CODE, PIN)` read from environment variables."""
    client_code = os.getenv("CLIENT_CODE")
    pin = os.getenv("PIN")

    if not client_code:
        logger.error("CLIENT_CODE missing from .env for TOTP login.")
        st.error("CLIENT_CODE is missing in `.env`. This is required for login.")
    if not pin:
        logger.error("PIN missing from .env for TOTP login.")
        st.error("PIN (MPIN) is missing in `.env`. This is required for login.")

    return client_code, pin

# --------------------------------------------------------------------------- #
#                          Main authentication functions                      #
# --------------------------------------------------------------------------- #

def login_via_totp_session(totp_code: str) -> bool:
    """Attempt to log in using the TOTP session method.

    Parameters
    ----------
    totp_code : str
        The 6â€‘digit TOTP generated by the authenticator app.

    Returns
    -------
    bool
        *True* if the login succeeds, *False* otherwise.
    """
    # Reset status at the start of every attempt
    st.session_state[SESSION_STATE_KEY_LOGGED_IN_STATUS] = False

    creds = _load_credentials_from_env()
    if not creds:
        return False

    client_code, pin = _get_totp_login_details_from_env()
    if not client_code or not pin:
        return False

    try:
        with st.spinner("Attempting login with 5paisaâ€¦ Please wait."):
            client = FivePaisaClient(cred=creds)
            logger.info("Attempting TOTP login for Client Code: %s", client_code)

            # get_totp_session internally handles the RequestToken â†’ AccessToken flow.
            login_response = client.get_totp_session(
                ClientCode=client_code,
                TOTP=totp_code,
                PIN=pin,
            )
            logger.debug("Raw 5paisa TOTP login API response: %s", login_response)

            # py5paisa stores the access token inside `client` on success
            access_token = client.get_access_token()

            if access_token and client.client_code:
                # Persist relevant data into the Streamlit session
                st.session_state[SESSION_STATE_KEY_CLIENT] = client
                st.session_state[SESSION_STATE_KEY_CLIENT_CODE] = client.client_code
                st.session_state[SESSION_STATE_KEY_ACCESS_TOKEN] = access_token
                st.session_state[SESSION_STATE_KEY_LOGGED_IN_STATUS] = True

                logger.info(
                    "Login successful for Client Code: %s. Access Token obtained.",
                    client.client_code,
                )
                st.success(f"Successfully logged in as Client Code: {client.client_code}")
                return True

            # -------------------- handle known error scenarios --------------------
            status = login_response.get("body", {}).get("Status")
            message = login_response.get("body", {}).get("Message", "Unknown login error.")

            if status == 1:
                error_msg = f"Login failed: Invalid credentials or PIN. ({message})"
            elif status == 2:
                error_msg = f"Login failed: Invalid or expired TOTP. ({message})"
            else:
                error_msg = f"Login failed: {message} (Status: {status})"

            logger.error(error_msg)
            st.error(error_msg)
            return False

    except Exception as exc:  # pylint: disable=broad-except
        logger.critical(
            "An unexpected error occurred during TOTP login: %s", exc, exc_info=True
        )
        st.error(f"An unexpected error occurred: {exc}. Check logs for details.")
        return False


def logout():
    """Clear all 5paisaâ€‘related keys from Streamlit session_state."""
    keys_to_clear = [
        SESSION_STATE_KEY_CLIENT,
        SESSION_STATE_KEY_CLIENT_CODE,
        SESSION_STATE_KEY_ACCESS_TOKEN,
        SESSION_STATE_KEY_REQUEST_TOKEN,
        SESSION_STATE_KEY_LOGGED_IN_STATUS,
        SESSION_STATE_KEY_USER_KEY,
    ]
    for key in keys_to_clear:
        st.session_state.pop(key, None)

    logger.info("User logged out. Session cleared.")
    st.info("You have been logged out.")
    st.rerun()


def get_authenticated_client() -> FivePaisaClient | None:
    """Return a cached, authenticated `FivePaisaClient` instance or *None*."""
    if st.session_state.get(SESSION_STATE_KEY_LOGGED_IN_STATUS):
        client = st.session_state.get(SESSION_STATE_KEY_CLIENT)
        if client and isinstance(client, FivePaisaClient):
            return client

        logger.warning(
            "Loggedâ€‘in status was True but no valid client instance found. "
            "Resetting status flag."
        )
        st.session_state[SESSION_STATE_KEY_LOGGED_IN_STATUS] = False
    return None


def is_user_logged_in() -> bool:
    """Quick check whether the user is currently logged in."""
    return st.session_state.get(SESSION_STATE_KEY_LOGGED_IN_STATUS, False)

# --------------------------------------------------------------------------- #
#                           UI helper (Streamlit)                             #
# --------------------------------------------------------------------------- #

def display_login_form(cols=None):
    """Render the TOTP login form in the Streamlit UI.

    Parameters
    ----------
    cols :
        Optional tuple of Streamlit columns. If provided, the form is rendered
        inside the first column; otherwise it appears in the sidebar.
    """
    login_container = cols[0] if cols else st.sidebar

    with login_container.expander("ðŸ”’ **5paisa Login**", expanded=not is_user_logged_in()):
        # Show loggedâ€‘in state with a logout button
        if is_user_logged_in():
            client_code = st.session_state.get(SESSION_STATE_KEY_CLIENT_CODE, "N/A")
            st.success(f"Logged in as: **{client_code}**")
            if st.button("Logout", key="auth_logout_button"):
                logout()
            return

        # Validate that credentials are present before exposing the form
        creds_check = _load_credentials_from_env()
        client_code_check, pin_check = _get_totp_login_details_from_env()
        if not creds_check or not client_code_check or not pin_check:
            st.warning(
                "Please ensure all API credentials, Client Code, and PIN are "
                "correctly set in your `.env` file."
            )
            return

        # Explanatory text
        st.info(
            "Enter the 6â€‘digit code from your authenticator app (e.g. Google "
            "Authenticator) to log in."
        )

        # The actual form
        with st.form(key="login_form"):
            totp_input = st.text_input(
                "TOTP Code",
                max_chars=6,
                type="password",
                placeholder="******",
                help="6â€‘digit code from Google Authenticator or similar app.",
            )
            submit_button = st.form_submit_button(label="Login")

            if submit_button:
                if not (totp_input.isdigit() and len(totp_input) == 6):
                    st.error("Please enter a valid 6â€‘digit TOTP.")
                elif login_via_totp_session(totp_input):
                    st.rerun()  # Refresh the UI after successful login

# --------------------------------------------------------------------------- #
#                          Standâ€‘alone test entryâ€‘point                       #
# --------------------------------------------------------------------------- #

if __name__ == "__main__":
    st.set_page_config(page_title="Auth Test", layout="wide")
    st.title("5paisa Authentication Module Test")

    # Prepare session keys for direct execution
    st.session_state.setdefault(SESSION_STATE_KEY_LOGGED_IN_STATUS, False)

    display_login_form()

    st.divider()
    st.subheader("Session State Inspector:")
    st.json(dict(st.session_state))

    if is_user_logged_in():
        st.success("User is logged in.")
        client = get_authenticated_client()
        if client:
            try:
                with st.spinner("Fetching holdings as a quick testâ€¦"):
                    holdings = client.holdings()
                    st.json(holdings)
            except Exception as exc:  # pylint: disable=broad-except
                st.error(f"Error fetching holdings: {exc}")
    else:
        st.warning("User is not logged in.")
